{"version":3,"sources":["../src/ts/app/util/date.utils.ts"],"names":[],"mappings":"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","file":"date.utils.js","sourcesContent":["import moment = require('moment');\r\nimport { Lab } from '../service/lab.service';\r\n\r\nexport default class DateUtils {\r\n\r\n    static MONTH_YEAR = \"MMMM, YYYY\";\r\n    static DATE_FORMAT = \"MMMM Do\";\r\n    static DATE_FORMAT_YEAR = \"MMMM Do, Y\"\r\n    static TIME_FORMAT = \"h:mm a\";\r\n\r\n    static SHORT_TIME = \"ha\";\r\n    static SHORT_TIME_MINUTES = \"h:mma\";\r\n\r\n    static DAY_NAME = \"dddd\";\r\n    static DAY_ORDINAL = \"Do\";\r\n\r\n    static ISO_DATE = \"YYYY-MM-DD\";\r\n\r\n    /**\r\n     * Convenience method to format a given moment object to show the date\r\n     */\r\n    static getDateString(time: moment.Moment, year?: boolean): string {\r\n        if (time.get(\"y\") == moment().get('y') && !year) {\r\n            return time.format(this.DATE_FORMAT);\r\n        } else {\r\n            return time.format(this.DATE_FORMAT_YEAR);\r\n        }\r\n    }\r\n\r\n    static getISODate(time: moment.Moment): string {\r\n        return time.format(this.ISO_DATE);\r\n    }\r\n\r\n    /**\r\n     * Convenience method to format a given moment object to show the time\r\n     */\r\n    static getTimeString(time: moment.Moment): string {\r\n        return time.format(this.TIME_FORMAT);\r\n    }\r\n\r\n    static getShortTimeForLab(lab: Lab, index?: number): string {\r\n        let time = this.getStartMomentForLab(lab, index);\r\n        if (time.minutes() > 0) {\r\n            return time.format(this.SHORT_TIME_MINUTES)\r\n        } else {\r\n            return time.format(this.SHORT_TIME);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string showing a start and end time, like '4:30 pm - 6:00 pm'\r\n     * Accepts a lab, and an optional index of the lab's dates and times\r\n     */\r\n    static getStartToEndTimeString(lab: Lab, index?: number): string {\r\n        return this.getTimeString(this.getStartMomentForLab(lab, index))\r\n             + \" - \" + this.getTimeString(this.getEndMomentForLab(lab, index));\r\n    }\r\n\r\n    /**\r\n     * Returns a moment object for the starting date and time of a lab session\r\n     * Accepts a lab object and an optional index of the lab's dates and times to use\r\n     */\r\n    static getStartMomentForLab(lab: Lab, index?: number): moment.Moment {\r\n        index = index || 0;\r\n        let time = lab.times.length == index + 1 ? lab.times[index] : lab.times[0];\r\n        return moment(lab.dates[index] + 'T' + lab.times[index]);\r\n    }\r\n\r\n    /**\r\n     * Returns a moment object for the end of a particular lab session\r\n     * Accepts a lab object and an optional index of the lab's dates and times to use\r\n     * \r\n     * If a lab is used with a repeatType set, the index will be ignored and the \r\n     * end of the lab's last session will be returned\r\n     */\r\n    static getEndMomentForLab(lab: Lab, index?: number): moment.Moment {\r\n        if (!lab.repeatType) {\r\n            index = index || lab.dates.length - 1;\r\n            let duration = lab.durations.length == index + 1 ? lab.durations[index] : lab.durations[0];\r\n            return this.getStartMomentForLab(lab, index).clone().add(lab.durations[index], \"m\");\r\n        } else {\r\n            let startDate = this.getStartMomentForLab(lab);\r\n            let endDate;\r\n            let repeatInterval = lab.repeatInterval || 1;\r\n            let sessionCount = lab.sessionCount || 2; // just get the next session if it is endless\r\n            let count = (sessionCount - 1) * repeatInterval;\r\n\r\n            switch(lab.repeatType) {\r\n                case 1: // daily\r\n                    endDate = startDate.clone().add(count, \"days\");\r\n                    break;\r\n                case 2: // weekly\r\n                    endDate = startDate.clone().add(count, \"weeks\");\r\n                    break;\r\n                case 3: // monthly by day\r\n                    endDate = startDate.clone().add(count, \"months\");\r\n                    break;\r\n                case 4: // monthly by week\r\n                    let weekInMonth = this.getWeekInMonth(startDate);\r\n                    let dayInWeek = startDate.day();\r\n                    endDate = startDate.clone();\r\n                    for (let x = 1; x < lab.sessionCount; x++) {\r\n                        endDate.add(repeatInterval, \"months\");\r\n                        endDate.date(1);\r\n                        endDate.day(((weekInMonth-1) * 6) + dayInWeek);\r\n                    }\r\n                    break;\r\n                case 5: // yearly\r\n                    endDate = startDate.clone().add(count, \"years\");\r\n                    break;\r\n            }\r\n            return endDate.add(lab.durations[0], \"m\");\r\n        }\r\n    }\r\n\r\n    static getAllDatesForLab(lab: Lab): string[] {\r\n\r\n        if (!lab.repeatType) {\r\n            // easy peasy\r\n            return lab.dates;\r\n        } else if (!lab.sessionCount) {\r\n            \r\n            // uh . . .\r\n            return [];\r\n\r\n        } else {\r\n            let dates: string[] = [];\r\n            dates.push(lab.dates[0]);\r\n            let startMoment = this.getStartMomentForLab(lab);\r\n            let sessionCount\r\n            let repeatInterval: number = lab.repeatInterval || 1;\r\n            let addString: string;\r\n            switch(lab.repeatType) {\r\n                case 1: // daily\r\n                    addString = 'days';\r\n                    break;\r\n                case 2: // weekly\r\n                    addString = 'weeks';\r\n                    break;\r\n                case 3: // monthly by day\r\n                    addString = 'months';\r\n                    break;\r\n                case 4: // monthly by week\r\n\r\n                    // this one is special\r\n                    let weekInMonth = this.getWeekInMonth(startMoment);\r\n                    let dayInWeek = startMoment.day();\r\n                    for (let x = 1; x < lab.sessionCount; x++) {\r\n                        // move to the next month\r\n                        startMoment.add(repeatInterval, \"months\");\r\n                        // move to the first of the month\r\n                        startMoment.date(1);\r\n                        // find the nth weekday of the month\r\n                        startMoment.day(((weekInMonth-1) * 6) + dayInWeek);\r\n                        dates.push(this.getISODate(startMoment));\r\n                    }\r\n\r\n                    break;\r\n                case 5: // yearly\r\n                    addString = 'years';\r\n                    break\r\n            }\r\n\r\n            if (addString) {\r\n                let addObj = {};\r\n                addObj[addString] = repeatInterval;\r\n                for (let x = 1; x < lab.sessionCount; x++) {\r\n                    startMoment.add(addObj);\r\n                    dates.push(this.getISODate(startMoment));\r\n                }\r\n            }\r\n\r\n            return dates;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns a string showing the start and end dates for a repeating lab\r\n     * It will be in the format 'from May 19, 2016 to June 19, 2016' \r\n     */\r\n    static getStartToEndDateString(lab: Lab): string {\r\n        if (!lab.repeatType) {\r\n            return \"\"; // you shouldn't even be calling this\r\n        }\r\n\r\n        let startDate = this.getStartMomentForLab(lab);\r\n        let startAndEnd = \"from \" + this.getDateString(startDate);\r\n\r\n        startAndEnd += \" to \" + this.getDateString(this.getEndMomentForLab(lab));\r\n\r\n        return startAndEnd;\r\n    }\r\n\r\n    static getWeekInMonth (time: moment.Moment): number {\r\n        return Math.ceil(time.get('date') / 7);\r\n    } \r\n\r\n    /**\r\n     * Takes a Lab and returns a string like \"every day\" or \"the last Monday of every month\"\r\n     */\r\n    static getRepeatString (lab: Lab): string {\r\n        if (!lab.repeatType) {\r\n            return \"\";\r\n        }\r\n\r\n        let repeatString: string;\r\n        let repeatInterval: string;\r\n\r\n        if (!lab.repeatInterval || lab.repeatInterval == 1) {\r\n            repeatInterval = \"every\";\r\n        } else if (lab.repeatInterval == 2) {\r\n            repeatInterval = \"every other\";\r\n        } else {\r\n            repeatInterval = \"every \" + this.getOrdinal(lab.repeatInterval);\r\n        }\r\n\r\n        let startTime = this.getStartMomentForLab(lab);\r\n\r\n        switch(lab.repeatType) {\r\n            case 1:\r\n                repeatString = repeatInterval + \" day\"\r\n                break;\r\n            case 2:\r\n                repeatString = repeatInterval + \" \" + startTime.format(this.DAY_NAME);\r\n                break;\r\n            case 3:\r\n                repeatString = \"the \" + startTime.format(this.DAY_ORDINAL) + \" of \" + repeatInterval + \" month\";\r\n                break;\r\n            case 4:\r\n                let nthWeekOfMonth = this.getWeekInMonth(startTime);\r\n                let nthWeekOfMonthString: string;\r\n                if (nthWeekOfMonth > 3) {\r\n                    nthWeekOfMonthString = \"last\";\r\n                } else {\r\n                    nthWeekOfMonthString = this.getOrdinal(nthWeekOfMonth);\r\n                }\r\n\r\n                repeatString = \"the \" + nthWeekOfMonthString + \" \" +\r\n                    startTime.format(this.DAY_NAME) + \" of \" + repeatInterval + \" month\";\r\n                break;\r\n            case 5:\r\n                repeatString = repeatInterval + \" year on \" + DateUtils.getDateString(startTime);\r\n                break;\r\n        }\r\n\r\n        return repeatString;\r\n    }\r\n\r\n    /**\r\n     * Utility function to return a \"1st\" \"2nd\" \"3rd\" \"4th\" etc.\r\n     */\r\n    static getOrdinal (num: number): string {\r\n        let last = num.toString().split('').pop();\r\n        if (num == 11 || num == 12 || num == 13) {\r\n            last = \"4\";\r\n        }\r\n        switch (last) {\r\n            case \"1\":\r\n                return num + \"st\";\r\n            case \"2\":\r\n                return num + \"nd\";\r\n            case \"3\":\r\n                return num + \"rd\";\r\n            default:\r\n                return num + \"th\";\r\n        }\r\n    }\r\n\r\n}"]}