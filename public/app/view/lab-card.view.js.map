{"version":3,"sources":["../src/ts/app/view/lab-card.view.ts"],"names":[],"mappings":"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","file":"lab-card.view.js","sourcesContent":["import {\r\n    Component,\r\n    OnInit,\r\n    Input\r\n} from '@angular/core';\r\n\r\nimport moment = require('moment');\r\n\r\nimport { Lab, LabService } from \"../service/lab.service\";\r\nimport { Person, TeamService } from \"../service/team.service\";\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: '.lab-card',\r\n    templateUrl: '../template/lab-card.view.html'\r\n})\r\nexport class LabCardView implements OnInit {\r\n\r\n    @Input() lab: Lab;\r\n    teacher: Person;\r\n\r\n    sessionString: string;\r\n\r\n    constructor(\r\n        private labService: LabService,\r\n        private teamService: TeamService\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.teamService.getPerson(this.lab.teacherKey)\r\n            .then(teacher => this.teacher = teacher);\r\n\r\n        this.getSimpleDate();\r\n\r\n        window['moment'] = moment;\r\n    }\r\n\r\n    getSimpleDate(): void {\r\n        if (this.lab.repeatType) {\r\n            // it repeats, so we'll show the number of whatevers that repeat\r\n\r\n            let sessionString: string;\r\n            if (this.lab.sessionCount) {\r\n                sessionString = this.lab.sessionCount + \" \";\r\n                // TODO: move these switch statements into some sort of util class, or on the lab service\r\n                switch(this.lab.repeatType) {\r\n                    case 1: // daily\r\n                        if (!this.lab.sessionCount) {\r\n                            sessionString = \"Every day\";\r\n                        } else {\r\n                            sessionString += \"days\"\r\n                        }\r\n                        break;\r\n                    case 2: // weekly\r\n                        sessionString += \"weeks\";\r\n                        break;\r\n                    case 3: // monthly by day\r\n                    case 4: // monthly by week\r\n                        sessionString += \"months\";\r\n                        break;\r\n                    case 5: // yearly\r\n                        sessionString += \"years\";\r\n                        break;\r\n                }\r\n            } else {\r\n                sessionString = \"Every \";\r\n                switch(this.lab.repeatType) {\r\n                    case 1: // daily\r\n                        sessionString += \"day\"\r\n                        break;\r\n                    case 2: // weekly\r\n                        sessionString += \"week\";\r\n                        break;\r\n                    case 3: // monthly by day\r\n                    case 4: // monthly by week\r\n                        sessionString += \"month\";\r\n                        break;\r\n                    case 5: // yearly\r\n                        sessionString += \"year\";\r\n                        break;\r\n                }\r\n            }\r\n\r\n            this.sessionString = sessionString;\r\n\r\n        } else {\r\n\r\n            if (this.lab.dates.length == 1) {\r\n                // single session!\r\n                let date = this.lab.dates[0];\r\n                let time = this.lab.times[0];\r\n                let duration = this.lab.durations[0];\r\n\r\n                let utcTime = date + \"T\" + time;\r\n\r\n                let startTime = moment(utcTime);\r\n                let endTime = startTime.clone().add(duration, \"m\");\r\n\r\n                this.sessionString = startTime.format(\"MMMM Do, h:mm a\") + \" - \" + endTime.format(\"h:mm a\");\r\n            } else {\r\n                // multi session! this is handled directly in the template\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n/*\r\n    getDateStuff(): void {\r\n        this.dates = [];\r\n        this.time = \"\";\r\n\r\n        if (this.lab.repeatType) {\r\n            // repeats!\r\n            let repeatInterval: string;\r\n\r\n            let date = this.lab.dates[0];\r\n            let time = this.lab.times[0];\r\n            let duration = this.lab.durations[0];\r\n\r\n            let utcTime = date + \"T\" + time;\r\n\r\n            let startTime = moment(utcTime);\r\n\r\n            if (!this.lab.repeatInterval || this.lab.repeatInterval == 1) {\r\n                repeatInterval = \"every\";\r\n            } else if (this.lab.repeatInterval == 2) {\r\n                repeatInterval = \"every other\";\r\n            } else {\r\n                repeatInterval = \"every \" + this.lab.repeatInterval + \"th\"; // FIXME: 3rd\r\n            }\r\n\r\n            // TODO: make this an enum?\r\n            switch(this.lab.repeatType) {\r\n                case 1:\r\n                    this.repeatString = repeatInterval + \" day\"\r\n                    break;\r\n                case 2:\r\n                    this.repeatString = repeatInterval + \" \" + startTime.format(\"dddd\");\r\n                    break;\r\n                case 3:\r\n                    this.repeatString = \"the \" + startTime.format(\"Do\") + \" of \" + repeatInterval + \" month\";\r\n                    break;\r\n                case 4:\r\n                    let nthWeekOfMonth = Math.ceil(startTime.get(\"date\") / 7);\r\n\r\n                    this.repeatString = \"the \" + nthWeekOfMonth + \" \" + startTime.format(\"Do\") + \" of \" + repeatInterval + \" month\";\r\n                    break;\r\n                case 5:\r\n                    this.repeatString = repeatInterval + \" year on \" + startTime.format(\"MMMM do\");\r\n                    break;\r\n            }\r\n\r\n        } else {\r\n            // doesn't repeat!\r\n\r\n            // sort through all the dates\r\n            for(let i = 0; i < this.lab.dates.length; i++) {\r\n                let date = this.lab.dates[i];\r\n                let time = this.lab.times[i] ? this.lab.times[i] : this.lab.times[0];\r\n                let duration = this.lab.durations[i] ? this.lab.durations[i] : this.lab.durations[0];\r\n\r\n                let utcTime = date + \"T\" + time;\r\n\r\n                let startTime = moment(utcTime);\r\n                let dateString = startTime.format(\"MMMM Do\");\r\n\r\n                let endTime = startTime.clone().add(duration, \"m\");\r\n                if (this.lab.times.length == 1 && !this.time) {\r\n                    this.time = startTime.format(\"h:mm a\") + \" to \" + endTime.format(\"h:mm a\");\r\n                } else {\r\n                    dateString += \" \" + startTime.format(\"h:mm a\") + \" - \" + endTime.format(\"h:mm a\");\r\n                }\r\n\r\n                this.dates.push(dateString);\r\n            }\r\n        }\r\n\r\n    }\r\n    */\r\n}"]}