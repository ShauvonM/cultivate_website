{"version":3,"sources":["../src/ts/app/service/lab.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAE3C,0BAAqB,mBAAmB,CAAC,CAAA;AACzC,6BAAoC,gBAAgB,CAAC,CAAA;AAErD;IAAA;IAyCA,CAAC;IAAD,UAAC;AAAD,CAzCA,AAyCC,IAAA;AAzCY,WAAG,MAyCf,CAAA;AAED;;;;;;;;GAQG;AAGH;IAGI,oBACY,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAH5B,SAAI,GAAU,EAAE,CAAC;IAIrB,CAAC;IAEL,4BAAO,GAAP,UAAQ,MAAc;QAAtB,iBA4BC;QA3BG,MAAM,CAAC,IAAI,OAAO,CAAQ,UAAC,OAAO,EAAE,MAAM;YACtC,KAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAC,IAAI;gBACtB,IAAI,OAAO,GAAU,EAAE,CAAC;gBACxB,EAAE,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC;oBAClB,OAAO,GAAG,KAAI,CAAC,IAAI,CAAC;gBACxB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,KAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;wBACjB,2BAA2B;wBAC3B,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC;4BACvB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACtB,CAAC;oBACL,CAAC,CAAC,CAAC;gBACP,CAAC;gBACD,OAAO,CAAC,IAAI,CAAC,UAAC,IAAI,EAAE,IAAI;oBACpB,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACzB,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACzB,EAAE,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;wBACd,MAAM,CAAC,CAAC,CAAC;oBACb,CAAC;oBACD,EAAE,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;wBACd,MAAM,CAAC,CAAC,CAAC,CAAC;oBACd,CAAC;oBACD,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC,CAAC,CAAC;gBACH,OAAO,CAAC,OAAO,CAAC,CAAC;YACrB,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;IAGO,6BAAQ,GAAhB;QAAA,iBAQC;QAPG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,WAAW,GAAG,IAAI,OAAO,CAAQ,UAAC,OAAO,EAAE,MAAM;gBAClD,KAAI,CAAC,IAAI,GAAG,gBAAI,CAAC;gBACjB,OAAO,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;QACP,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,2BAAM,GAAN,UAAO,IAAY;QAAnB,iBAUC;QATG,MAAM,CAAC,IAAI,OAAO,CAAM,UAAC,OAAO,EAAE,MAAM;YACpC,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;gBAC1B,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG;oBACb,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;wBACnB,OAAO,CAAC,GAAG,CAAC,CAAC;oBACjB,CAAC;gBACL,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;IA3DL;QAAC,iBAAU,EAAE;;kBAAA;IA6Db,iBAAC;AAAD,CA5DA,AA4DC,IAAA;AA5DY,kBAAU,aA4DtB,CAAA","file":"lab.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { LABS } from '../data/labs.data';\r\nimport { Person, TeamService } from './team.service';\r\n\r\nexport class Lab {\r\n    uuid: string;\r\n    name: string;\r\n    format: string; // what sort of event this is, i.e. \"class\" \"drop-in\" \"meet-up\"\r\n\r\n    dates: string[]; // ISO 8601 - '2016-11-07'\r\n    times: string[]; // ISO 8601, include timezone - '17:30:00-500' is 5:30 PM Eastern\r\n    durations: number[]; // in minutes\r\n    // these things are arrays, in case this item repeats irregularly\r\n    // they should be the same length - if there are multiple dates and only one time and duration,\r\n    // we can assume that this event is the same time and duration on each date\r\n\r\n    // I'm pretty sure that if these arrays are bigger than one, the repeatType needs to be 0 (or not set)\r\n\r\n    // note that the intention here is not for multiple offerings of the same one-off class, \r\n    //  but multiple sessions of a single class that happen on different days or times\r\n\r\n    price: number; // USD\r\n\r\n    // TODO: do we need a SKU or something for purchasing?\r\n\r\n    blurb: string;\r\n    description: string;\r\n    \r\n    location?: string; // leave blank to default to \"The Studio\"\r\n\r\n    teacherKey: string;\r\n\r\n    // TODO: add tags\r\n    // TODO: a \"theme\" field?\r\n    // TODO: a \"who is this for\" field?\r\n\r\n    image?: string;\r\n\r\n    spaces?: number; // number of seats total\r\n    minSpaces?: number; // number required to go\r\n    spacesSold?: number; // number of seats sold\r\n\r\n    repeatType?: number; // see below\r\n    sessionCount?: number; // total number of sessions - if repeatType is set, 0 is indefinite\r\n    repeatInterval?: number; // every [interval] days, weeks, etc (0 is treated as 'every')\r\n}\r\n\r\n/**\r\n * Repeat types:\r\n * 0 - does not repeat\r\n * 1 - daily            (every day)\r\n * 2 - weekly           (ex. every Wednesday)\r\n * 3 - monthly by day   (ex. the 1st of every month)\r\n * 4 - monthly by week  (ex. the last monday of every month)\r\n * 5 - yearly\r\n */\r\n\r\n@Injectable()\r\nexport class LabService {\r\n    private labs: Lab[] = [];\r\n\r\n    constructor(\r\n        private teamService: TeamService\r\n    ) { }\r\n\r\n    getLabs(format: string): Promise<Lab[]> {\r\n        return new Promise<Lab[]>((resolve, reject) => {\r\n            this._getLabs().then((labs) => {\r\n                let classes: Lab[] = [];\r\n                if (format == \"all\") {\r\n                    classes = this.labs;\r\n                } else {\r\n                    this.labs.forEach(lab => {\r\n                        // TODO: make this an enum?\r\n                        if (lab.format == format) {\r\n                            classes.push(lab);\r\n                        }\r\n                    });\r\n                }\r\n                classes.sort((lab1, lab2) => {\r\n                    let val1 = lab1.dates[0];\r\n                    let val2 = lab2.dates[0];\r\n                    if (val1 > val2) {\r\n                        return 1;\r\n                    }\r\n                    if (val1 < val2) {\r\n                        return -1;\r\n                    }\r\n                    return 0;\r\n                });\r\n                resolve(classes);\r\n            })\r\n        })\r\n    }\r\n\r\n    private _labPromise: Promise<Lab[]>;\r\n    private _getLabs(): Promise<Lab[]> {\r\n        if (!this._labPromise) {\r\n            this._labPromise = new Promise<Lab[]>((resolve, reject) => {\r\n                this.labs = LABS;\r\n                resolve(this.labs);\r\n            });\r\n        }\r\n        return this._labPromise;\r\n    }\r\n\r\n    getLab(uuid: string): Promise<Lab> {\r\n        return new Promise<Lab>((resolve, reject) => {\r\n            this.getLabs(\"all\").then((labs) => {\r\n                labs.forEach((lab) => {\r\n                    if (lab.uuid == uuid) {\r\n                        resolve(lab);\r\n                    }\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n}"]}