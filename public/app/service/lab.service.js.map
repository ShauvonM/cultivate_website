{"version":3,"sources":["../src/ts/app/service/lab.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAE3C,2CAA2C;AAE3C;IAAA;IA0BA,CAAC;IAAD,UAAC;AAAD,CA1BA,AA0BC,IAAA;AA1BY,WAAG,MA0Bf,CAAA;AAED;;;;;;;;GAQG;AAGH;IAGI;QAFQ,SAAI,GAAU,EAAE,CAAC;IAET,CAAC;IAGjB,4BAAO,GAAP;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QAExB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,2BAAM,GAAN,UAAO,IAAY;QAAnB,iBAUC;QATG,MAAM,CAAC,IAAI,OAAO,CAAM,UAAC,OAAO,EAAE,MAAM;YACpC,KAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAC,IAAI;gBACrB,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG;oBACb,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;wBACnB,OAAO,CAAC,GAAG,CAAC,CAAC;oBACjB,CAAC;gBACL,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;IAxBL;QAAC,iBAAU,EAAE;;kBAAA;IA0Bb,iBAAC;AAAD,CAzBA,AAyBC,IAAA;AAzBY,kBAAU,aAyBtB,CAAA","file":"lab.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n//import { TEAM } from '../data/team.data';\r\n\r\nexport class Lab {\r\n    uuid: string;\r\n    name: string;\r\n\r\n    date?: string;\r\n    dates?: string[];\r\n\r\n    time: string;\r\n    duration: number;\r\n    price: number;\r\n    blurb: string;\r\n    description: string;\r\n    location: string;\r\n\r\n    teacherKey: string;\r\n    theme: string;\r\n    // TODO: add tags\r\n\r\n    image?: string;\r\n\r\n    spaces: number;\r\n    spacesSold: number;\r\n\r\n    repeatType?: number; // see below\r\n    repeatCount?: number; // 0 for indefinite\r\n    repeatInterval?: number; // every [interval] days, weeks, etc\r\n}\r\n\r\n/**\r\n * Repeat types:\r\n * 0 - does not repeat\r\n * 1 - daily            (every day)\r\n * 2 - weekly           (ex. every Wednesday)\r\n * 3 - monthly by day   (ex. the 1st of every month)\r\n * 4 - monthly by week  (ex. the last monday of every month)\r\n * 5 - yearly\r\n */\r\n\r\n@Injectable()\r\nexport class LabService {\r\n    private labs: Lab[] = [];\r\n\r\n    constructor() { }\r\n\r\n    private _labPromise: Promise<Lab[]>;\r\n    getLabs(): Promise<Lab[]> {\r\n        if (!this._labPromise) {\r\n            //this._labPromise = Promise.resolve(TEAM);\r\n        }\r\n        return this._labPromise;\r\n    }\r\n\r\n    getLab(uuid: string): Promise<Lab> {\r\n        return new Promise<Lab>((resolve, reject) => {\r\n            this.getLabs().then((labs) => {\r\n                labs.forEach((lab) => {\r\n                    if (lab.uuid == uuid) {\r\n                        resolve(lab);\r\n                    }\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n}"]}